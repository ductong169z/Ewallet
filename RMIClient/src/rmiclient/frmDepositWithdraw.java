/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmiclient;

import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import rmiserver.IUserFunc;
import rmiserver.User;

/**
 *
 * @author Quan Duc Loc CE140037 (SE1401)
 */
public class frmDepositWithdraw extends javax.swing.JFrame {

    String action;
    User userInfo;
    IUserFunc iUser;
    int maxDepositLim;
    int maxWithdrawLim;

    /**
     * Creates new form frmDepositWithdraw
     *
     * @param action
     * @param userInfo
     */
    public frmDepositWithdraw(String action, User userInfo) {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAmount = new javax.swing.JLabel();
        lblCurrentBalance = new javax.swing.JLabel();
        txtBalance = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        btnConfirm = new javax.swing.JButton();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAmount.setText("Deposit Amount");

        lblCurrentBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCurrentBalance.setText("Current Balance");

        txtBalance.setEditable(false);
        txtBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnConfirm.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnConfirm.setText("Confirm Deposit");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        lblPhoneNumber.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPhoneNumber.setText("Your Phone Number");

        txtPhoneNumber.setEditable(false);
        txtPhoneNumber.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCurrentBalance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBalance)
                            .addComponent(txtAmount)
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoneNumber))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentBalance)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmount)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(btnConfirm)
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        String txtAmountString; // deposit amount in String
        int txtAmountInt; // deposit amount in integer
        boolean error; // check if user input is wrong
        User result; // store the result (new User info from Server)

        /* Update Deposit Limit and Withdraw Limit */
        this.maxDepositLim = userInfo.getDeposit_lim();
        this.maxWithdrawLim = userInfo.getWithdraw_lim();

        /* Switch action dependent on deposit or withdraw transaction*/
        switch (action) {
            case "deposit":

                /* initialize variables */
                txtAmountString = txtAmount.getText(); // get string from input field
                txtAmountInt = -1; // indicate that number conversion is not done
                error = false; // by default there's no error
                result = null; // by default the result is null

                /* Check if user not enter anything or just spaces */
                if (txtAmountString == null || txtAmountString.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please enter a number in \"Deposit Amount\" field", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // try number conversion from text (String) to integer
                    try {
                        txtAmountInt = Integer.parseInt(txtAmountString);
                    } catch (NumberFormatException ex) {
                        error = true; // indicate that there's an error in conversion
                    }

                    // if there's an error occured
                    if (error) {
                        JOptionPane.showMessageDialog(this, "Please enter a number in \"Deposit Amount\" field.", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                        // check if user enter wrong deposit amount (must be at least 1000 VND, and at most deposit limit)
                    } else if (txtAmountInt < 1000 || txtAmountInt > maxDepositLim) {
                        JOptionPane.showMessageDialog(this, "Please enter a value between 1000 and " + maxDepositLim + " (inclusive).", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // call method in server to execute
                        try {
                            result = iUser.deposit(userInfo, txtAmountInt);
                        } catch (RemoteException ex) {
                            Logger.getLogger(frmDepositWithdraw.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        // if user already reached maximum deposit limit
                        if (result == null) {
                            JOptionPane.showMessageDialog(this, "You have already reached maximum deposit limit!", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();
                            // if deposit is successful 
                        } else if (result.getMoney() != userInfo.getMoney()) {
                            JOptionPane.showMessageDialog(this, "Deposit successfully! \nNew Account Balance: " + result.getMoney() + " VND", "Transaction Completed!", JOptionPane.INFORMATION_MESSAGE);
                            userInfo = result; // update User info
                            txtBalance.setText(result.getMoney() + " VND"); // set new balance
                            txtAmount.setText(""); // empty the deposit amount inputted
                            // if deposit failed
                        } else if (result.getDeposit_lim() == userInfo.getDeposit_lim()) {
                            JOptionPane.showMessageDialog(this, "Deposit failed! \nSQL Exception Occured In Server!", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            // if the total deposit amount in current day exceeds deposit limit (with current deposit amount)
                        } else {
                            JOptionPane.showMessageDialog(this, "Total deposit amount today exceeds limit of " + userInfo.getDeposit_lim() + " VND! \nYou can only deposit at maximum " + result.getDeposit_lim() + " VND more.", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            this.maxDepositLim = result.getDeposit_lim(); // update the maximum deposit limit
                        }
                    }
                }
                break;

            case "withdraw":

                /* initialize variables */
                txtAmountString = txtAmount.getText(); // get string from input field
                txtAmountInt = -1; // indicate that number conversion is not done
                error = false; // by default there's no error
                result = null; // by default the result is null

                /* Check if user not enter anything or just spaces */
                if (txtAmountString == null || txtAmountString.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please enter a number in \"Withdraw Amount\" field", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // try number conversion from text (String) to integer
                    try {
                        txtAmountInt = Integer.parseInt(txtAmountString);
                    } catch (NumberFormatException ex) {
                        error = true; // indicate that there's an error in conversion
                    }

                    // if there's an error occured
                    if (error) {
                        JOptionPane.showMessageDialog(this, "Please enter a number in \"Withdraw Amount\" field.", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                        // check if user enter wrong withdraw amount (must be at least 1000 VND, and at most withdraw limit)
                    } else if (maxWithdrawLim > userInfo.getMoney() && (txtAmountInt < 1000 || txtAmountInt > maxWithdrawLim)) {
                        JOptionPane.showMessageDialog(this, "Please enter a value between 1000 and " + userInfo.getMoney() + " (inclusive).", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                    } else if (maxWithdrawLim <= userInfo.getMoney() && txtAmountInt < 1000 || txtAmountInt > maxWithdrawLim) {
                        JOptionPane.showMessageDialog(this, "Please enter a value between 1000 and " + maxWithdrawLim + " (inclusive).", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // call method in server to execute
                        try {
                            result = iUser.withdraw(userInfo, txtAmountInt);
                        } catch (RemoteException ex) {
                            Logger.getLogger(frmDepositWithdraw.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        // if user already reached maximum withdraw limit
                        if (result == null) {
                            JOptionPane.showMessageDialog(this, "You have already reached maximum withdraw limit!", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();
                            // if withdrawal is successful 
                        } else if (result.getMoney() != userInfo.getMoney()) {
                            JOptionPane.showMessageDialog(this, "Withdraw successfully! \nNew Account Balance: " + result.getMoney() + " VND", "Transaction Completed!", JOptionPane.INFORMATION_MESSAGE);
                            userInfo = result; // update User info
                            txtBalance.setText(result.getMoney() + " VND"); // set new balance
                            txtAmount.setText(""); // empty the withdraw amount inputted
                            // if withdrawal failed
                        } else if (result.getWithdraw_lim() == userInfo.getWithdraw_lim()) {
                            JOptionPane.showMessageDialog(this, "Withdraw failed! \nSQL Exception Occured In Server!", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            // if the withdraw amount exceeds current balance
                        } else if (result.getDeposit_lim() == -1) {
                            JOptionPane.showMessageDialog(this, "Withdraw amount exceeds " + userInfo.getMoney() + " VND (your current Balance)! \nYou can only withdraw at maximum " + userInfo.getMoney() + " VND.", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            this.maxWithdrawLim = userInfo.getMoney(); // update the maximum withdraw limit
                            // if the total withdraw amount in current day exceeds withdraw limit (with current withdraw amount)
                        } else {
                            JOptionPane.showMessageDialog(this, "Total withdraw amount today exceeds limit of " + userInfo.getWithdraw_lim() + " VND! \nYou can only withdraw at maximum " + result.getWithdraw_lim() + " VND more.", "Transaction Failed!", JOptionPane.INFORMATION_MESSAGE);
                            this.maxWithdrawLim = result.getWithdraw_lim(); // update the maximum withdraw limit
                        }
                    }
                }
                break;
        }
    }//GEN-LAST:event_btnConfirmActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblCurrentBalance;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtPhoneNumber;
    // End of variables declaration//GEN-END:variables
}
