/**
 *
 * @author Quan Duc Loc CE140037 SE1401
 */
package rmiclient;

import java.awt.Image;
import java.awt.Toolkit;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.swing.JOptionPane;
import rmiserver.IAuthentication;

public class frmUserInterface extends javax.swing.JFrame {

    IAuthentication iAuth;

    /**
     * Creates new form frmUserInterface
     */
    public frmUserInterface() {
        initComponents();
        try {
            // look up the registry created in RMI Server
            iAuth = (IAuthentication) Naming.lookup("rmi://localhost:5000/AuthenticationForm");
        } catch (NotBoundException ex) {
            System.out.println("Not Bound Exception Occured!");
        } catch (MalformedURLException ex) {
            System.out.println("Malformed URL Exception Occured!");
        } catch (RemoteException ex) {
            System.out.println("Remote Exception Occured!");
        } catch (Exception ex) {
            System.out.println("An unknown error occured!");
        }
        // set icon for the frame
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/person.png"));
        this.setIconImage(icon);
        this.setLocationRelativeTo(null); // center the form
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGender = new javax.swing.ButtonGroup();
        tabList = new javax.swing.JTabbedPane();
        panelRegister = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        lblPassword = new javax.swing.JLabel();
        lblPasswordConfirm = new javax.swing.JLabel();
        txtPasswordConfirm = new javax.swing.JPasswordField();
        lblFullname = new javax.swing.JLabel();
        txtFullname = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        rdoMale = new javax.swing.JRadioButton();
        rdoFemale = new javax.swing.JRadioButton();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        lblAddress = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        panelLogin = new javax.swing.JPanel();
        lblUsernameLog = new javax.swing.JLabel();
        lblPasswordLog = new javax.swing.JLabel();
        txtUsernameLog = new javax.swing.JTextField();
        txtPasswordLog = new javax.swing.JPasswordField();
        btnOKLog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Authentication Form");

        tabList.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblUsername.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblUsername.setText("Username:");

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        txtPassword.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblPassword.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblPassword.setText("Password:");

        lblPasswordConfirm.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblPasswordConfirm.setText("Confirmation:");

        txtPasswordConfirm.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblFullname.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblFullname.setText("Fullname:");

        txtFullname.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblGender.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblGender.setText("Gender:");

        grpGender.add(rdoMale);
        rdoMale.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        rdoMale.setSelected(true);
        rdoMale.setText("Male");

        grpGender.add(rdoFemale);
        rdoFemale.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        rdoFemale.setText("Female");

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblEmail.setText("Email:");

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblPhone.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblPhone.setText("Phone:");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        btnOK.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblAddress.setText("Address:");

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        javax.swing.GroupLayout panelRegisterLayout = new javax.swing.GroupLayout(panelRegister);
        panelRegister.setLayout(panelRegisterLayout);
        panelRegisterLayout.setHorizontalGroup(
            panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFullname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(lblAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblPasswordConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtFullname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelRegisterLayout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelRegisterLayout.createSequentialGroup()
                                    .addComponent(rdoMale, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rdoFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(panelRegisterLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegisterLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
            .addGroup(panelRegisterLayout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelRegisterLayout.setVerticalGroup(
            panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasswordConfirm)
                    .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFullname)
                    .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(rdoMale)
                    .addComponent(rdoFemale))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addContainerGap())
        );

        tabList.addTab("Register", panelRegister);

        panelLogin.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblUsernameLog.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblUsernameLog.setText("Username:");

        lblPasswordLog.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblPasswordLog.setText("Password:");

        txtUsernameLog.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        txtPasswordLog.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        btnOKLog.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnOKLog.setText("OK");
        btnOKLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLoginLayout = new javax.swing.GroupLayout(panelLogin);
        panelLogin.setLayout(panelLoginLayout);
        panelLoginLayout.setHorizontalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblPasswordLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUsernameLog, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsernameLog, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addComponent(txtPasswordLog, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(20, 20, 20))
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(btnOKLog, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLoginLayout.setVerticalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsernameLog)
                    .addComponent(txtUsernameLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasswordLog)
                    .addComponent(txtPasswordLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(btnOKLog)
                .addContainerGap(318, Short.MAX_VALUE))
        );

        tabList.addTab("Login", panelLogin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabList)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabList)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* OK Button in REGISTER FORM */
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        boolean error = false; // check if there is any errors occured

        /* Check if there are any fields having null values or being empty, or the 2 password fields don't match */
        if (txtUsername.getText() == null || txtUsername.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The username must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (String.valueOf(txtPassword.getPassword()) == null || String.valueOf(txtPassword.getPassword()).trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The password must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (String.valueOf(txtPasswordConfirm.getPassword()) == null || String.valueOf(txtPasswordConfirm.getPassword()).trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The password confirmation must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (!String.valueOf(txtPasswordConfirm.getPassword()).equals(String.valueOf(txtPassword.getPassword()))) {
            JOptionPane.showMessageDialog(this, "The password confirmation must match the password!", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else if (txtFullname.getText() == null || txtFullname.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The full name field must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (txtEmail.getText() == null || txtEmail.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The email field must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (txtPhone.getText() == null || txtPhone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The phone field must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (txtAddress.getText() == null || txtAddress.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The address field must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
            /* If there are no fields having null value or being empty and both password fields match */
        } else {
            /* Temp variables to store values from the fields user inputted */
            String username = txtUsername.getText();
            String password = String.valueOf(txtPasswordConfirm.getPassword());
            String fullname = txtFullname.getText();
            String email = txtEmail.getText();
            String phone = txtPhone.getText();
            String gender = rdoMale.isSelected() ? "Male" : "Female";
            String address = txtAddress.getText();
            String hashPassword = "";
            int result = -1; // store the result of operation (0 if successful, 1 if unsuccessful)

            /* code to hash password using MD5 algorithm */
            try {
                MessageDigest md = MessageDigest.getInstance("MD5");

                byte[] messageDigest = md.digest(password.getBytes());

                BigInteger no = new BigInteger(1, messageDigest);

                // Convert message digest into hex value 
                hashPassword = no.toString(16);
                while (hashPassword.length() < 32) {
                    hashPassword = "0" + hashPassword;
                }
            } catch (NoSuchAlgorithmException e) {
                JOptionPane.showMessageDialog(this, "Hashing password error!", "Registration failed", JOptionPane.ERROR_MESSAGE);
                error = true; // mark that there's an error occured
            }

            // call method createUser on server side to execute
            try {
                result = iAuth.createUser(username, hashPassword, fullname, gender, email, phone, address);
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(this, "Remote Exception Occured!", "Registration failed", JOptionPane.ERROR_MESSAGE);
                error = true; // mark that there's an error occured
            }

            // if there are no errors, and operation is successful on server side
            if (!error && result == 0) {
                // clear all input fields
                txtUsername.setText("");
                txtPassword.setText("");
                txtPasswordConfirm.setText("");
                txtFullname.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txtAddress.setText("");
                JOptionPane.showMessageDialog(this, "Adding new user to database succesfully!", "Creating new user successfully", JOptionPane.INFORMATION_MESSAGE);
                // if operation is unsuccessful on server side
            } else if (result == 1) {
                JOptionPane.showMessageDialog(this, "Adding new user to database failed!\nSQL Exception Occured!", "Creating new user failed", JOptionPane.ERROR_MESSAGE);
                // if there's an error occured
            } else {
                JOptionPane.showMessageDialog(this, "An error occured!", "Creating new user failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnOKActionPerformed

    /* OK Button in LOGIN FORM */
    private void btnOKLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKLogActionPerformed
        boolean error = false; // check if there is any errors occured

        // check if there are any fields having null values or being empty, or the 2 password fields don't match
        if (txtUsernameLog.getText() == null || txtUsernameLog.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The username must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
        } else if (String.valueOf(txtPasswordLog.getPassword()) == null || String.valueOf(txtPasswordLog.getPassword()).trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The password must not be null or empty!", "Input Notification", JOptionPane.INFORMATION_MESSAGE);
            // if there are no fields having null value or being empty and both password fields match
        } else {
            /* Temp variables to store values from the fields user inputted */
            String username = txtUsernameLog.getText();
            String password = String.valueOf(txtPasswordLog.getPassword());
            int result = -1; // store the result of operation (0 if successful, 1 if unsuccessful)

            // call method validateUser on server side to execute
            try {
                result = iAuth.validateUser(username, password);
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(this, "Remote Exception Occured!", "Login failed", JOptionPane.ERROR_MESSAGE);
                error = true; // mark that there's an error occured
            }

            // if there are no errors occured, and operation successful on server side
            if (!error && result == 0) {
                // clear all input fields
                txtUsernameLog.setText("");
                txtPasswordLog.setText("");
                JOptionPane.showMessageDialog(this, "You are logged in!", "Login successfully", JOptionPane.INFORMATION_MESSAGE);
                // if login failed (but no errors)
            } else if (!error && result == 2) {
                JOptionPane.showMessageDialog(this, "Username or Password is incorrect!\n(CASE-SENSITIVE)", "Login failed", JOptionPane.WARNING_MESSAGE);
                // if operation unsuccessful on server side
            } else if (result == 1) {
                JOptionPane.showMessageDialog(this, "An error occured on server side!", "Login failed", JOptionPane.ERROR_MESSAGE);
                // if there's an error occured on client side 
            } else {
                JOptionPane.showMessageDialog(this, "An error occured!", "Login failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnOKLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUserInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUserInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUserInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUserInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnOKLog;
    private javax.swing.ButtonGroup grpGender;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordConfirm;
    private javax.swing.JLabel lblPasswordLog;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblUsernameLog;
    private javax.swing.JPanel panelLogin;
    private javax.swing.JPanel panelRegister;
    private javax.swing.JRadioButton rdoFemale;
    private javax.swing.JRadioButton rdoMale;
    private javax.swing.JTabbedPane tabList;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirm;
    private javax.swing.JPasswordField txtPasswordLog;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtUsernameLog;
    // End of variables declaration//GEN-END:variables
}
